---
swagger: "2.0"
info:
  description: "An API for the game server allowing mobile app to interact with players,\
    \ etc"
  version: "1.0"
  title: "Game Server API"
basePath: "/v1"
tags:
- name: "default"
  description: "Default namespace"
- name: "players"
  description: "Operations related to players"
- name: "network"
  description: "Operations related to the game network"
- name: "table"
  description: "Operations related to the game tables"
- name: "game"
  description: "Operations related to the overall game"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /game/tick:
    put:
      security:
      - APISecurity: []
      tags:
      - "game"
      summary: "Causes a game tick to happen"
      operationId: "gameserver.controllers.do_tick"
      parameters: []
      responses:
        200:
          description: "Success"
      x-tags:
      - tag: "game"
  /game/clear_players:
    put:
      security:
      - APISecurity: []
      tags:
      - "game"
      summary: "Causes all players to be cleared and balances on the network zeroed"
      operationId: "gameserver.controllers.clear_players"
      parameters: []
      responses:
        200:
          description: "Success"
      x-tags:
      - tag: "game"
  /game/league_table:
    get:
      security:
      - APISecurity: []
      tags:
      - "game"
      - "players"
      summary: "Returns a league table of players"
      operationId: "gameserver.controllers.league_table"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/LeagueTable"
      x-tags:
      - tag: "game"
      
  /network/:
    get:
      security:
      - APISecurity: []
      tags:
      - "network"
      summary: "Returns a JSON representation of the network"
      operationId: "gameserver.controllers.get_network"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Network"
      x-tags:
      - tag: "network"
    post:
      security:
      - APISecurity: []
      tags:
      - "network"
      summary: "Creates a network from a JSON upload"
      operationId: "gameserver.controllers.create_network"
      parameters:
        - in: body
          name: network
          description: JSON file of the network to create.
          required: true
          schema:
            $ref: "#/definitions/Network"
      responses:
        200:
          description: "Success"
      x-tags:
      - tag: "network"
    put:
      security:
      - APISecurity: []
      tags:
      - "network"
      summary: "Updates an existing network from a JSON upload"
      operationId: "gameserver.controllers.update_network"
      parameters:
        - in: body
          name: network
          description: JSON file of the network to update.
          required: true
          schema:
            $ref: "#/definitions/Network"
      responses:
        200:
          description: "Success"
      x-tags:
      - tag: "network"
  /network/{id}:
    get:
      security:
      - APISecurity: []
      tags:
      - "network"
      summary: "Returns the specified node"
      operationId: "gameserver.controllers.get_node"
      parameters:
      - name: "id"
        in: "path"
        description: "The node id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Node"
        404:
          description: "Node not found"
      x-tags:
      - tag: "network"
  /network/{id}/wallets:
    get:
      security:
      - APISecurity: []
      tags:
      - "network"
      summary: "Returns the wallets at the specified node"
      operationId: "gameserver.controllers.get_wallets"
      parameters:
      - name: "id"
        in: "path"
        description: "The node id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Node"
        404:
          description: "Node not found"
      x-tags:
      - tag: "network"
  /players/:
    post:
      security:
      - APISecurity: []
      tags:
      - "players"
      summary: "Creates a new game player"
      operationId: "gameserver.controllers.create_player"
      parameters:
      - in: "body"
        name: "player"
        description: "The player to create."
        required: false
        schema:
          $ref: "#/definitions/PlayerCreation"
      responses:
        201:
          description: "Player successfully created."
      x-tags:
      - tag: "players"
  /players/{player_id}:
    get:
      security:
      - APISecurity: []
      tags:
      - "players"
      summary: "Returns the specified player"
      operationId: "gameserver.controllers.get_player"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Player"
        404:
          description: "Player not found"
      x-tags:
      - tag: "players"
    patch:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      summary: "Updates attributes of a player"
      operationId: "gameserver.controllers.update_player"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - in: "body"
        name: "player"
        description: "The player to create."
        required: false
        schema:
          $ref: "#/definitions/PlayerPatch"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Player"
        401:
          description: "Unauthorised"
        404:
          description: "Player not found"
      x-tags:
      - tag: "players"
      

  /players/{player_id}/funding:
    get:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      summary: "Returns the funding for specified player"
      operationId: "gameserver.controllers.get_funding"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Fund"
        401:
          description: "Unauthorised"
        404:
          description: "Player not found"
      x-tags:
      - tag: "players"
    put:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      summary: "Sets the funding of the policies for this player"
      operationId: "gameserver.controllers.set_funding"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - in: "body"
        name: "funding"
        description: "The details of the funding to apply."
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Fund"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Fund"
        401:
          description: "Unauthorised"
        404:
          description: "Player not found"
      x-tags:
      - tag: "players"
  /players/{player_id}/table/{table_id}:
    put:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      - "table"
      summary: "Sets the table the player is on"
      operationId: "gameserver.controllers.set_player_table"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - name: "table_id"
        in: "path"
        description: "The table id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorised"
        404:
          description: "Table not found"
      x-tags:
      - tag: "players"
    delete:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      - "table"
      summary: "Removes the player from the specified table"
      operationId: "gameserver.controllers.delete_player_table"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - name: "table_id"
        in: "path"
        description: "The table id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorised"
        404:
          description: "Table not found"
      x-tags:
      - tag: "players"
  /players/{player_id}/policies/{policy_id}/offer:
    get:
      security:
      - UserSecurity: []
      - APISecurity: []
      tags:
      - "players"
      summary: "Returns an offer to sell the specified policy"
      operationId: "gameserver.controllers.get_policy_offer"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - name: "policy_id"
        in: "path"
        description: "The policy id"
        required: true
        type: "string"
      - name: "price"
        in: "query"
        description: "The price for the sale, defaults to 20,000"
        type: "number"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PolicyOffer"
        401:
          description: "Unauthorised"
        404:
          description: "Can't find player or policy"
      x-tags:
      - tag: "players"

  /players/{player_id}/policies/:
    post:
      security:
      - APISecurity: []
      - UserSecurity: []
      tags:
      - "players"
      summary: "Buys a policy from another player using supplied offer"
      operationId: "gameserver.controllers.buy_policy"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The player id"
        required: true
        type: "string"
      - in: "body"
        name: "offer"
        description: "The sale transaction"
        required: false
        schema:
          $ref: "#/definitions/PolicyOffer"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorised"
        402:
          description: "Not enough funds to complete transaction"
        404:
          description: "Cannot find policy, buyer, or seller"
      x-tags:
      - tag: "players"

  /tables/:
    get:
      security:
      - APISecurity: []
      tags:
      - "table"
      summary: "Returns a list of the tables"
      operationId: "gameserver.controllers.get_tables"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Id"
      x-tags:
      - hasMore: "true"
        tag: "table"
      - tag: "network"
    post:
      security:
      - APISecurity: []
      tags:
      - "table"
      summary: "Create a new gaming table"
      description: "Success"
      operationId: "gameserver.controllers.create_table"
      parameters:
      - in: "body"
        name: "table"
        description: "The details of the table to create."
        required: false
        schema:
            $ref: "#/definitions/Table"
      responses:
        204:
          description: "Table succesfully created."
          schema:
            $ref: "#/definitions/Id"
        400:
          description: "Table couldn't have been created."
        500:
          description: "An unexpected error occured."
          schema:
            $ref: "#/definitions/Error"
      x-tags:
      - tag: "table"
  /tables/{id}:
    get:
      security:
      - APISecurity: []
      tags:
      - "table"
      summary: "Return the network of a specific table"
      operationId: "gameserver.controllers.get_table"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of this object"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Table"
      x-tags:
      - hasMore: "true"
        tag: "table"
      - tag: "network"
  /tables/{id}/clear:
    put:
      security:
      - APISecurity: []
      tags:
      - "table"
      summary: "Clear all the players off this table"
      operationId: "gameserver.controllers.clear_table"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of this object"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Table not found"
      x-tags:
      - hasMore: "true"
        tag: "table"
securityDefinitions:
  UserSecurity:
    type: "apiKey"
    name: "X-USER-KEY"
    in: "header"
  APISecurity:
    type: "apiKey"
    name: "X-API-KEY"
    in: "header"
definitions:
  Id:
    properties:
      id:
        type: "string"
        description: "Id of this object"
  PlayerCreation:
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The name of this player"
  Player:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id of this player"
      name:
        type: "string"
        description: "Player name"
      goal:
         $ref: "#/definitions/Node"
      policies:
        type: "array"
        items:
          $ref: "#/definitions/Node"
      table:
        type: "string"
        description: "Id of the table this player is on"
      token:
        type: "string"
        description: "Secret token used for auth"
        readOnly: true
  PlayerPatch:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Player name"
      goal:
        type: "string"
        description: "Id of the goal"
      policies:
        type: "array"
        description: "Array of Ids of policies"
        items:
          type: string
      table:
        type: "string"
        description: "Id of the table this player is on"
  Connection:
    properties:
      from_id:
        type: "string"
        description: "id of source node"
      to_id:
        type: "string"
        description: "id of destination node"
      weight:
        type: "number"
        description: "weight of this connection"
  Fund:
    properties:
      from_id:
        type: "string"
        description: "id of funding player"
      to_id:
        type: "string"
        description: "id of destination node"
      amount:
        type: "number"
        description: "amount to fund"
  Node:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
        description: "id of this node"
      name:
        type: "string"
        description: "Node name"
      balance:
        type: "number"
        description: "Node current balance"
      activation_amount:
        type: "number"
        description: "The amount required for this node to be active"
      max_amount:
        type: "number"
        description: "The maximum amount this node can hold"
      leakage:
        type: "number"
        description: "The rate this node leaks"
      connections:
        type: "array"
        description: "this nodes connections"
        items:
          $ref: "#/definitions/Connection"
      wallets:
        type: "array"
        description: "the wallets associated with this node"
        items:
          $ref: "#/definitions/Wallet"
  Network:
    type: "object"
    properties:
      goals:
        type: "array"
        description: "Goals of this network"
        items:
          $ref: "#/definitions/Node"
      policies:
        type: "array"
        description: "Policies of this network"
        items:
          $ref: "#/definitions/Node"
  Wallet:
    type: "object"
    properties:
      owner:
        type: "string"
        description: "id of owner of this wallet"
      location:
        type: "string"
        description: "id of the location of this wallet"
      balance:
        type: "number"
        description: "amount of money in this wallet"
  PolicyOffer:
    type: "object"
    properties:
      seller_id:
        type: "string"
        description: "Id of the seller of this policy"
      policy_id:
        type: "string"
        description: "The policy for sale"
      price:
        type: "number"
        description: "Sale price"
      checksum:
        type: "string"
        description: "Checksum of the offer"
    required:
      - seller_id
      - policy_id
      - price
      - checksum
  Table:
    properties:
      id:
        type: "string"
        description: "id of this table"
      name:
        type: "string"
        description: "Table name"
      players:
        type: "array"
        description: "Players on this table"
        items:
          $ref: "#/definitions/Player"
      network:
        $ref: "#/definitions/Network"
  LeagueTable:
    properties:
      rows:    
        type: "array"
        description: "Array of player league table entries"
        items:
          $ref: "#/definitions/LeagueTableEntry"
  LeagueTableEntry:
    properties:
      id:
        type: "string"
        description: "player id"
      name:
        type: "string"
        description: "player name"
      goal:
        type: "string"
        description: "goal name"
      goal_total:
        type: "number"
        description: "total amount funded of their goal"
      goal_contribution:
        type: "number"
        description: "amount this player funded their goal"
  ErrorMessage:
    properties:
      longMessage:
        type: "string"
      shortMessage:
        type: "string"
  MultilingualErrorMessage:
    type: "object"
    properties:
      defaultLanguage:
        $ref: "#/definitions/ErrorMessage"
    additionalProperties:
      $ref: "#/definitions/ErrorMessage"
  Error:
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "string"
        enum:
        - "DBERR"
        - "NTERR"
        - "UNERR"
      message:
        $ref: "#/definitions/MultilingualErrorMessage"
parameters:
  id:
    name: "id"
    in: "path"
    description: "The id of this object"
    required: true
    type: "string"
responses:
  Standard500ErrorResponse:
    description: "An unexpected error occured."
    schema:
      $ref: "#/definitions/Error"
